generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  username    String?    @unique
  email       String    @unique
  password    String
  profilePic  String?   
  bio         String?   
  role        Role      @default(USER)
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  posts       Post[]
  comments    Comment[]
  likes       Like[]
  followers   Follow[]  @relation("UserFollowers")
  following   Follow[]  @relation("UserFollowing")
  messagesSent    Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  imageUrl  String?   
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt


  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

 
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int

  @@unique([userId, postId]) 
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  followerId Int
  following User @relation("UserFollowing", fields: [followingId], references: [id])
  followingId Int

  @@unique([followerId, followingId]) 
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  // Relations
  sender    User @relation("MessagesSent", fields: [senderId], references: [id])
  senderId  Int
  receiver  User @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId Int
}

enum Role {
  USER
  ADMIN
}
